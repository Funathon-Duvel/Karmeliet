apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: karmeliet-workflow-r
  namespace: gr-funathon-duvel
spec:
    entrypoint: main

    # Create a pvc for the workflow
    volumeClaimTemplates:
      - metadata:
          name: workflow-tmp
        spec:
          # The CephFS storage class accept three access mode:
          # ReadWriteOnce
          # ReadOnlyMany
          # ReadWriteMany
          # But not the rook-ceph-block storage class. It only supports ReadWriteOnce
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi

    templates:
      #############################################################################################
      #################### main template for planning dag of the pipeline #########################
      #############################################################################################
      - name: main
        dag:
          tasks:
            - name: init-workdir
              template: init-workdir-wt

            - name: http-import-dataset
              dependencies: [init-workdir]
              template: http-import-dataset-wt
              arguments:
                parameters:
                  - name: input-file-name
                    value: listings.csv.gz
                  - name: url
                    value: https://minio.lab.sspcloud.fr/projet-funathon/diffusion/data/paris/2021-04-10/listings.csv.gz
            
            - name: unzip-dataset
              dependencies: [http-import-dataset]
              template:  unzip-dataset-wt
              arguments:
                parameters:
                  - name: input-file-name
                    value: listings.csv.gz
                  - name: output-file-name
                    value: listings.csv
            
            - name: r-process
              dependencies: [unzip-dataset]
              template: r-process-wt
              arguments:
                parameters:
                  - name: git-repo
                    value: "https://github.com/Funathon-Duvel/Kasteel.git"
                  - name: project
                    value: Kasteel
                  - name: git-revision
                    value: gh-pages
                  - name: relative-path-to-script
                    value: "R-Scripts/main.R"
                  - name: input-file
                    value: "/mnt/tmp/listings.csv"
                  - name: output-file
                    value: "/mnt/tmp/paris.csv"
                  - name: args
                    value: "75056"

            - name: save-to-minio
              dependencies: [r-process]
              template: save-to-minio-wt
              arguments:
                parameters:
                  - name: file-name-to-save
                    value: paris.csv

        ####################################################################################################################
        #################### task template for implementing the logic of each task of the pipeline #########################
        ####################################################################################################################

      - name: init-workdir-wt
        container:
          image: alpine
          command: [sh, -c]
          args: ["mkdir -p /mnt/tmp /mnt/input /mnt/code /mnt/logs; ls -l /mnt"]
          volumeMounts:
            - name: workflow-tmp
              mountPath: /mnt

      - name: http-import-dataset-wt
        inputs:
          parameters:
            - name: input-file-name
            - name: url
          artifacts:
            - name: input-data
              path: "/mnt/input/{{inputs.parameters.input-file-name}}"
              mode: 0755
              http:
                url: "{{inputs.parameters.url}}"
        container:
          image: alpine
          volumeMounts:
            - name: workflow-tmp
              mountPath: /mnt

      - name: unzip-dataset-wt
        inputs:
          parameters:
            - name: input-file-name
            - name: output-file-name
        container:
          image: alpine
          command: [sh, -c]
          args: ["gunzip -c /mnt/input/{{inputs.parameters.input-file-name}} > /mnt/tmp/{{inputs.parameters.output-file-name}}; ls -l /mnt"]
          volumeMounts:
            - name: workflow-tmp
              mountPath: /mnt
      
      - name: r-process-wt
        inputs:
          parameters:
            - name: git-repo
            - name: project
            - name: git-revision
            - name: relative-path-to-script
            - name: input-file
            - name: output-file
            - name: args
          artifacts:
            # Check out the master branch of the argo repo and place it at /src
            # revision can be anything that git checkout accepts: branch, commit, tag, etc.
            - name: code
              path: "/mnt/code/{{inputs.parameters.project}}"
              git:
                repo: "{{inputs.parameters.git-repo}}"
                revision: "{{inputs.parameters.git-revision}}"
        container:
          image: funathonduvel/kwak
          env:
            - name: ARGS
              value: "{{inputs.parameters.args}}"
            - name: INPUT_FILE
              value: "{{inputs.parameters.input-file}}"
            - name: OUTPUT_FILE
              value: "{{inputs.parameters.output-file}}"
          command: [sh, -c]            
          args: ["Rscript /mnt/code/{{inputs.parameters.project}}/{{inputs.parameters.relative-path-to-script}}"]
          volumeMounts:
            - name: workflow-tmp
              mountPath: /mnt

      - name: save-to-minio-wt
        inputs:
          parameters:
            - name: file-name-to-save
        outputs:
          artifacts:
            - name: output-save
              path: "/mnt/tmp/{{inputs.parameters.file-name-to-save}}"
              s3:
                endpoint: minio.lab.sspcloud.fr
                bucket: argo-artifacts
                key: funathon/paris.csv
                accessKeySecret:
                  name: my-s3-credentials
                  key: accessKey
                secretKeySecret:
                  name: my-s3-credentials
                  key: secretKey
        container:
          image: alpine
          volumeMounts:
            - name: workflow-tmp
              mountPath: /mnt